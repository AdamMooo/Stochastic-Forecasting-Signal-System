import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.optimize import minimize
import warnings
warnings.filterwarnings('ignore')
from datetime import datetime, timedelta
import xlsxwriter
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Font, PatternFill
from openpyxl.utils import get_column_letter
from openpyxl.drawing.image import Image as XLImage
import os

class AdvancedStockProjection:
    def __init__(self, tickers, investment_per_stock=10000, projection_years=2):
        """
        Initialize the advanced stock projection system
        
        Parameters:
        -----------
        tickers : list
            List of stock tickers to analyze
        investment_per_stock : float
            Amount to invest per stock for analysis
        projection_years : int
            Number of years to project forward
        """
        self.tickers = tickers
        self.investment_per_stock = investment_per_stock
        self.projection_years = projection_years
        self.projection_days = int(252 * projection_years)
        
        # Data storage
        self.stock_data = {}
        self.macro_data = {}
        self.results = {}
        
        # Simulation parameters
        self.sim_count = 50000
        self.dt = 1/252
        
        print(f"Initializing Advanced Stock Projection System for {len(tickers)} stocks")
        print(f"Projection Period: {projection_years} years ({self.projection_days} trading days)")
        print(f"Investment per stock: ${investment_per_stock:,}")
        
    def fetch_data(self, years_back=5):
        """Fetch stock data and macroeconomic indicators"""
        start_date = (datetime.now() - timedelta(days=365*years_back)).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"\nFetching data from {start_date} to {end_date}")
        
        # Fetch individual stock data
        for ticker in self.tickers:
            try:
                stock = yf.Ticker(ticker)
                hist = stock.history(start=start_date, end=end_date)
                info = stock.info
                
                # Ensure timezone-naive index for all data
                if hist.index.tz is not None:
                    hist = hist.tz_localize(None)
                
                self.stock_data[ticker] = {
                    'prices': hist['Close'],
                    'volume': hist['Volume'],
                    'high': hist['High'],
                    'low': hist['Low'],
                    'returns': hist['Close'].pct_change().dropna(),
                    'info': info,
                    'current_price': hist['Close'].iloc[-1]
                }
                print(f"✓ {ticker}: {len(hist)} days of data")
            except Exception as e:
                print(f"✗ Error fetching {ticker}: {e}")
                
        # Fetch macroeconomic data
        macro_tickers = {
            '^VIX': 'VIX',      # Volatility Index
            '^TNX': 'TNX',      # 10-Year Treasury
            '^GSPC': 'SPY',     # S&P 500
            'EURUSD=X': 'EUR',  # Euro/USD instead of DXY
            'GLD': 'GOLD'       # Gold ETF as alternative
        }
        
        for ticker, name in macro_tickers.items():
            try:
                # Try different methods for fetching data
                data = None
                if ticker == '^VIX':
                    # VIX sometimes needs special handling
                    data = yf.download(ticker, start=start_date, end=end_date, progress=False)
                    if data is not None and not data.empty and 'Close' in data.columns:
                        data = data['Close']
                    else:
                        # Try alternative VIX symbol
                        alt_data = yf.download('VIX', start=start_date, end=end_date, progress=False)
                        if alt_data is not None and not alt_data.empty and 'Close' in alt_data.columns:
                            data = alt_data['Close']
                else:
                    data = yf.download(ticker, start=start_date, end=end_date, progress=False)
                    if data is not None and isinstance(data, pd.DataFrame) and 'Close' in data.columns:
                        data = data['Close']
                
                # Ensure we have valid data
                if data is None or data.empty or len(data) < 50:
                    raise ValueError(f"Insufficient data for {ticker}")
                
                # Ensure timezone-naive index
                try:
                    if hasattr(data.index, 'tz') and data.index.tz is not None:
                        data = data.tz_localize(None)
                except AttributeError:
                    # If timezone handling fails, continue with the data as is
                    pass
                
                # Calculate returns and store
                returns = data.pct_change().dropna()
                if len(returns) > 30:  # Minimum viable data
                    self.macro_data[name] = returns
                    print(f"✓ {name}: {len(returns)} days of macro data")
                else:
                    raise ValueError(f"Insufficient return data for {ticker}")
                    
            except Exception as e:
                print(f"✗ Could not fetch {name} ({ticker}): {e}")
                # Create empty series with same index as first stock for alignment
                if self.stock_data:
                    first_stock = list(self.stock_data.keys())[0]
                    sample_index = self.stock_data[first_stock]['returns'].index[:10]  # Small sample
                    self.macro_data[name] = pd.Series(0.0, index=sample_index)
                else:
                    self.macro_data[name] = pd.Series(dtype=float)
                
    def calculate_momentum_indicators(self, ticker):
        """Calculate various momentum indicators"""
        prices = self.stock_data[ticker]['prices']
        returns = self.stock_data[ticker]['returns']
        
        # RSI
        delta = returns
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        
        # MACD
        exp1 = prices.ewm(span=12).mean()
        exp2 = prices.ewm(span=26).mean()
        macd = exp1 - exp2
        signal = macd.ewm(span=9).mean()
        histogram = macd - signal
        
        # Bollinger Bands
        sma = prices.rolling(window=20).mean()
        std = prices.rolling(window=20).std()
        upper_bb = sma + (std * 2)
        lower_bb = sma - (std * 2)
        bb_position = (prices - lower_bb) / (upper_bb - lower_bb)
        
        # Moving Average Convergence
        ma_50 = prices.rolling(window=50).mean()
        ma_200 = prices.rolling(window=200).mean()
        ma_momentum = (ma_50 - ma_200) / ma_200
        
        return {
            'rsi': rsi.iloc[-1] if not rsi.empty else 50,
            'macd': macd.iloc[-1] if not macd.empty else 0,
            'bb_position': bb_position.iloc[-1] if not bb_position.empty else 0.5,
            'ma_momentum': ma_momentum.iloc[-1] if not ma_momentum.empty else 0,
            'price_vs_ma50': (prices.iloc[-1] - ma_50.iloc[-1]) / ma_50.iloc[-1] if not ma_50.empty else 0,
            'price_vs_ma200': (prices.iloc[-1] - ma_200.iloc[-1]) / ma_200.iloc[-1] if not ma_200.empty else 0
        }
        
    def calculate_macro_correlations(self, ticker):
        """Calculate correlations with macroeconomic factors"""
        returns = self.stock_data[ticker]['returns']
        correlations = {}
        
        # Ensure returns index is timezone-naive
        try:
            if hasattr(returns.index, 'tz') and returns.index.tz is not None:
                returns = returns.tz_localize(None)
        except AttributeError:
            # If timezone handling fails, continue with the data as is
            pass
        
        for macro_name, macro_returns in self.macro_data.items():
            try:
                # Skip if macro data is empty or too short
                if macro_returns.empty or len(macro_returns) < 30:
                    correlations[macro_name] = 0.0
                    continue
                
                # Ensure macro_returns index is timezone-naive
                try:
                    if hasattr(macro_returns.index, 'tz') and macro_returns.index.tz is not None:
                        macro_returns = macro_returns.tz_localize(None)
                except AttributeError:
                    # If timezone handling fails, continue with the data as is
                    pass
                
                # Align dates - find common dates
                common_dates = returns.index.intersection(macro_returns.index)
                
                if len(common_dates) > 30:  # Minimum observations
                    stock_aligned = returns.loc[common_dates]
                    macro_aligned = macro_returns.loc[common_dates]
                    
                    # Ensure both are 1-dimensional pandas Series
                    if isinstance(stock_aligned, pd.Series) and isinstance(macro_aligned, pd.Series):
                        # Remove any NaN values
                        combined = pd.DataFrame({'stock': stock_aligned, 'macro': macro_aligned}).dropna()
                        
                        if len(combined) > 30:
                            # Calculate correlation using numpy for better type safety
                            stock_values = combined['stock'].to_numpy()
                            macro_values = combined['macro'].to_numpy()
                            
                            # Check for valid data
                            if len(stock_values) > 0 and len(macro_values) > 0:
                                # Use numpy correlation
                                corr_matrix = np.corrcoef(stock_values, macro_values)
                                if corr_matrix.shape == (2, 2):
                                    corr = corr_matrix[0, 1]
                                    correlations[macro_name] = corr if not np.isnan(corr) else 0.0
                                else:
                                    correlations[macro_name] = 0.0
                            else:
                                correlations[macro_name] = 0.0
                        else:
                            correlations[macro_name] = 0.0
                    else:
                        correlations[macro_name] = 0.0
                else:
                    correlations[macro_name] = 0.0
                    
            except Exception as e:
                print(f"Warning: Could not calculate correlation for {ticker} vs {macro_name}: {e}")
                correlations[macro_name] = 0.0
        
        # If no correlations calculated, provide defaults
        if not correlations:
            correlations = {'VIX': 0.0, 'TNX': 0.0, 'SPY': 0.0, 'EUR': 0.0, 'GOLD': 0.0}
        
        return correlations
        
    def estimate_jump_parameters(self, returns):
        """Estimate jump diffusion parameters using method of moments"""
        # Basic jump detection - returns beyond 3 standard deviations
        threshold = 3 * returns.std()
        jumps = returns[np.abs(returns) > threshold]
        
        if len(jumps) < 5:
            return {'lambda': 0, 'mu_jump': 0, 'sigma_jump': 0}
            
        # Jump intensity (jumps per year)
        lambda_jump = len(jumps) / (len(returns) / 252)
        
        # Jump size parameters
        mu_jump = jumps.mean()
        sigma_jump = jumps.std()
        
        return {
            'lambda': lambda_jump,
            'mu_jump': mu_jump,
            'sigma_jump': sigma_jump
        }
        
    def enhanced_gbm_simulation(self, ticker):
        """Run enhanced GBM simulation with momentum and macro factors"""
        
        # Basic parameters
        returns = self.stock_data[ticker]['returns']
        current_price = self.stock_data[ticker]['current_price']
        
        # Calculate base drift and volatility
        base_mu = returns.mean() * 252
        base_sigma = returns.std() * np.sqrt(252)
        
        # Get momentum indicators
        momentum = self.calculate_momentum_indicators(ticker)
        
        # Get macro correlations
        macro_corr = self.calculate_macro_correlations(ticker)
        correlations = macro_corr  # Use for later reference
        
        # Get jump parameters
        jump_params = self.estimate_jump_parameters(returns)
        
        # Momentum adjustment factor
        rsi_factor = (momentum['rsi'] - 50) / 50 * 0.1  # RSI momentum
        bb_factor = (momentum['bb_position'] - 0.5) * 0.05  # Bollinger bands
        ma_factor = momentum['ma_momentum'] * 0.15  # Moving average momentum
        
        momentum_adjustment = rsi_factor + bb_factor + ma_factor
        
        # Macro adjustment (assuming current macro conditions persist)
        macro_adjustment = 0
        if correlations and len(correlations) > 0:
            if 'VIX' in correlations and correlations['VIX'] != 0:
                macro_adjustment += correlations['VIX'] * 0.05  # VIX fear factor
            if 'TNX' in correlations and correlations['TNX'] != 0:
                macro_adjustment += correlations['TNX'] * 0.03  # Interest rate sensitivity
            if 'SPY' in correlations and correlations['SPY'] != 0:
                macro_adjustment += correlations['SPY'] * 0.08  # Market correlation
            if 'EUR' in correlations and correlations['EUR'] != 0:
                macro_adjustment += correlations['EUR'] * 0.02  # Currency sensitivity
            
        # Adjusted parameters
        adjusted_mu = base_mu + momentum_adjustment + macro_adjustment
        adjusted_sigma = base_sigma * (1 + abs(momentum_adjustment) * 0.5)
        
        # Monte Carlo simulation with jump diffusion
        np.random.seed(42)
        paths = np.zeros((self.projection_days + 1, self.sim_count))
        paths[0] = current_price
        
        for t in range(1, self.projection_days + 1):
            # Standard GBM component
            z = np.random.standard_normal(self.sim_count)
            gbm_component = (adjusted_mu - 0.5 * adjusted_sigma**2) * self.dt + adjusted_sigma * np.sqrt(self.dt) * z
            
            # Jump component
            if jump_params['lambda'] > 0:
                jump_prob = jump_params['lambda'] * self.dt
                jump_occur = np.random.random(self.sim_count) < jump_prob
                jump_sizes = np.random.normal(jump_params['mu_jump'], jump_params['sigma_jump'], self.sim_count)
                jump_component = jump_occur * jump_sizes
            else:
                jump_component = 0
                
            # Combine components
            total_return = gbm_component + jump_component
            paths[t] = paths[t-1] * np.exp(total_return)
            
        return {
            'paths': paths,
            'base_mu': base_mu,
            'adjusted_mu': adjusted_mu,
            'base_sigma': base_sigma,
            'adjusted_sigma': adjusted_sigma,
            'momentum': momentum,
            'macro_corr': macro_corr,
            'jump_params': jump_params,
            'momentum_adjustment': momentum_adjustment,
            'macro_adjustment': macro_adjustment
        }
        
    def analyze_projections(self, ticker, simulation_results):
        """Analyze projection results and calculate statistics"""
        paths = simulation_results['paths']
        current_price = self.stock_data[ticker]['current_price']
        
        # Final prices
        final_prices = paths[-1]
        
        # Calculate returns
        total_returns = (final_prices / current_price - 1) * 100
        annualized_returns = ((final_prices / current_price) ** (1/self.projection_years) - 1) * 100
        
        # Calculate investment outcomes
        shares = self.investment_per_stock / current_price
        final_values = final_prices * shares
        profit_loss = final_values - self.investment_per_stock
        
        # Statistics
        stats = {
            # Price statistics
            'current_price': current_price,
            'mean_final_price': np.mean(final_prices),
            'median_final_price': np.median(final_prices),
            'price_5th_percentile': np.percentile(final_prices, 5),
            'price_95th_percentile': np.percentile(final_prices, 95),
            'price_std': np.std(final_prices),
            
            # Return statistics
            'mean_total_return': np.mean(total_returns),
            'median_total_return': np.median(total_returns),
            'return_5th_percentile': np.percentile(total_returns, 5),
            'return_95th_percentile': np.percentile(total_returns, 95),
            'return_std': np.std(total_returns),
            
            # Annualized returns
            'mean_annualized_return': np.mean(annualized_returns),
            'median_annualized_return': np.median(annualized_returns),
            'annualized_5th_percentile': np.percentile(annualized_returns, 5),
            'annualized_95th_percentile': np.percentile(annualized_returns, 95),
            
            # Investment outcomes
            'investment_amount': self.investment_per_stock,
            'shares_purchased': shares,
            'mean_final_value': np.mean(final_values),
            'median_final_value': np.median(final_values),
            'value_5th_percentile': np.percentile(final_values, 5),
            'value_95th_percentile': np.percentile(final_values, 95),
            'mean_profit_loss': np.mean(profit_loss),
            'median_profit_loss': np.median(profit_loss),
            'probability_profit': np.mean(profit_loss > 0) * 100,
            'probability_loss': np.mean(profit_loss < 0) * 100,
            
            # Risk metrics
            'var_5': np.percentile(profit_loss, 5),
            'cvar_5': np.mean(profit_loss[profit_loss <= np.percentile(profit_loss, 5)]),
            'max_drawdown': np.min(profit_loss),
            'upside_potential': np.percentile(profit_loss, 95),
            
            # Model parameters
            'base_mu': simulation_results['base_mu'],
            'adjusted_mu': simulation_results['adjusted_mu'],
            'base_sigma': simulation_results['base_sigma'],
            'adjusted_sigma': simulation_results['adjusted_sigma'],
            'momentum_adjustment': simulation_results['momentum_adjustment'],
            'macro_adjustment': simulation_results['macro_adjustment']
        }
        
        return stats
        
    def create_visualizations(self, ticker, simulation_results, stats):
        """Create comprehensive visualizations"""
        paths = simulation_results['paths']
        current_price = self.stock_data[ticker]['current_price']
        
        # Create subplot figure
        fig, axes = plt.subplots(2, 3, figsize=(20, 12))
        fig.suptitle(f'{ticker} - Advanced Stock Price Projections', fontsize=16, fontweight='bold')
        
        # 1. Price paths
        ax1 = axes[0, 0]
        sample_paths = paths[:, :300] 
        time_axis = np.arange(len(sample_paths))
        
        for i in range(sample_paths.shape[1]):
            ax1.plot(time_axis, sample_paths[:, i], alpha=0.1, color='blue')
            
        # Add percentile bands
        percentiles = np.percentile(paths, [10, 25, 50, 75, 90], axis=1)
        ax1.plot(time_axis, percentiles[2], 'r-', linewidth=2, label='Median')
        ax1.fill_between(time_axis, percentiles[0], percentiles[4], alpha=0.2, color='red', label='10th-90th percentile')
        ax1.fill_between(time_axis, percentiles[1], percentiles[3], alpha=0.3, color='red', label='25th-75th percentile')
        
        ax1.axhline(y=current_price, color='black', linestyle='--', label='Current Price')
        ax1.set_title('Price Projection Paths')
        ax1.set_xlabel('Trading Days')
        ax1.set_ylabel('Price ($)')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # 2. Final price distribution
        ax2 = axes[0, 1]
        final_prices = paths[-1]
        ax2.hist(final_prices, bins=50, alpha=0.7, color='skyblue', edgecolor='black')
        ax2.axvline(current_price, color='red', linestyle='--', linewidth=2, label='Current Price')
        ax2.axvline(stats['mean_final_price'], color='green', linestyle='-', linewidth=2, label='Mean Final Price')
        ax2.axvline(stats['median_final_price'], color='orange', linestyle='-', linewidth=2, label='Median Final Price')
        ax2.set_title('Final Price Distribution')
        ax2.set_xlabel('Final Price ($)')
        ax2.set_ylabel('Frequency')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # 3. Returns distribution
        ax3 = axes[0, 2]
        returns = ((final_prices / current_price - 1) * 100)
        ax3.hist(returns, bins=50, alpha=0.7, color='lightgreen', edgecolor='black')
        ax3.axvline(0, color='red', linestyle='--', linewidth=2, label='Break-even')
        ax3.axvline(stats['mean_total_return'], color='blue', linestyle='-', linewidth=2, label='Mean Return')
        ax3.set_title('Total Return Distribution')
        ax3.set_xlabel('Total Return (%)')
        ax3.set_ylabel('Frequency')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # 4. Profit/Loss distribution
        ax4 = axes[1, 0]
        shares = self.investment_per_stock / current_price
        profit_loss = (final_prices * shares) - self.investment_per_stock
        ax4.hist(profit_loss, bins=50, alpha=0.7, color='gold', edgecolor='black')
        ax4.axvline(0, color='red', linestyle='--', linewidth=2, label='Break-even')
        ax4.axvline(stats['mean_profit_loss'], color='blue', linestyle='-', linewidth=2, label='Mean P&L')
        ax4.set_title('Profit/Loss Distribution')
        ax4.set_xlabel('Profit/Loss ($)')
        ax4.set_ylabel('Frequency')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        # 5. Momentum indicators
        ax5 = axes[1, 1]
        momentum = simulation_results['momentum']
        indicators = ['RSI', 'MACD', 'BB Position', 'MA Momentum', 'Price vs MA50', 'Price vs MA200']
        values = [momentum['rsi'], momentum['macd']*100, momentum['bb_position']*100, 
                 momentum['ma_momentum']*100, momentum['price_vs_ma50']*100, momentum['price_vs_ma200']*100]
        
        bars = ax5.bar(indicators, values, color=['red', 'blue', 'green', 'orange', 'purple', 'brown'])
        ax5.set_title('Current Momentum Indicators')
        ax5.set_ylabel('Indicator Value')
        ax5.tick_params(axis='x', rotation=45)
        ax5.grid(True, alpha=0.3)
        
        # Color bars based on bullish/bearish signals
        for i, (bar, val) in enumerate(zip(bars, values)):
            if i == 0:  # RSI
                bar.set_color('red' if val > 70 else 'green' if val < 30 else 'yellow')
            elif i == 2:  # BB Position
                bar.set_color('red' if val > 80 else 'green' if val < 20 else 'yellow')
            else:
                bar.set_color('green' if val > 0 else 'red')
        
        # 6. Risk metrics
        ax6 = axes[1, 2]
        risk_metrics = {
            'VaR (5%)': stats['var_5'],
            'CVaR (5%)': stats['cvar_5'],
            'Max Loss': stats['max_drawdown'],
            'Mean P&L': stats['mean_profit_loss'],
            'Upside (95%)': stats['upside_potential']
        }
        
        colors = ['red', 'darkred', 'red', 'blue', 'green']
        bars = ax6.bar(risk_metrics.keys(), risk_metrics.values(), color=colors, alpha=0.7)
        ax6.set_title('Risk Metrics')
        ax6.set_ylabel('Value ($)')
        ax6.tick_params(axis='x', rotation=45)
        ax6.grid(True, alpha=0.3)
        ax6.axhline(y=0, color='black', linestyle='-', alpha=0.5)
        
        plt.tight_layout()
        
        # Save plot
        plot_filename = f'{ticker}_analysis.png'
        plt.savefig(plot_filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        return plot_filename
        
    def run_analysis(self):
        """Run the complete analysis for all stocks"""
        print("\n" + "="*60)
        print("RUNNING ADVANCED STOCK PROJECTION ANALYSIS")
        print("="*60)
        
        # Fetch data
        self.fetch_data()
        
        # Run analysis for each stock
        for ticker in self.tickers:
            if ticker not in self.stock_data:
                continue
                
            print(f"\nAnalyzing {ticker}...")
            
            # Run enhanced GBM simulation
            simulation_results = self.enhanced_gbm_simulation(ticker)
            
            # Analyze projections
            stats = self.analyze_projections(ticker, simulation_results)
            
            # Create visualizations
            plot_filename = self.create_visualizations(ticker, simulation_results, stats)
            
            # Store results
            self.results[ticker] = {
                'simulation': simulation_results,
                'stats': stats,
                'plot': plot_filename
            }
            
            print(f"✓ {ticker} analysis complete")
            
        # Generate summary report
        self.generate_report()
        
    def generate_report(self):
        """Generate comprehensive Excel report"""
        output_file = f'Advanced_Stock_Projections_{datetime.now().strftime("%Y%m%d_%H%M")}.xlsx'
        
        print(f"\n Generating report: {output_file}")
        
        with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
            
            # Summary sheet
            summary_data = []
            for ticker in self.results:
                stats = self.results[ticker]['stats']
                simulation = self.results[ticker]['simulation']
                
                summary_data.append({
                    'Ticker': ticker,
                    'Current Price': f"${stats['current_price']:.2f}",
                    'Investment': f"${stats['investment_amount']:,.0f}",
                    'Shares': f"{stats['shares_purchased']:.2f}",
                    'Mean Final Price': f"${stats['mean_final_price']:.2f}",
                    'Mean Total Return %': f"{stats['mean_total_return']:.1f}%",
                    'Mean Annual Return %': f"{stats['mean_annualized_return']:.1f}%",
                    'Probability of Profit': f"{stats['probability_profit']:.1f}%",
                    'Mean Profit/Loss': f"${stats['mean_profit_loss']:,.0f}",
                    'VaR (5%)': f"${stats['var_5']:,.0f}",
                    'Upside Potential': f"${stats['upside_potential']:,.0f}",
                    'Base Volatility': f"{stats['base_sigma']:.1%}",
                    'Adjusted Volatility': f"{stats['adjusted_sigma']:.1%}",
                    'Momentum Adjustment': f"{simulation['momentum_adjustment']:.1%}",
                    'Macro Adjustment': f"{simulation['macro_adjustment']:.1%}"
                })
            
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='Summary', index=False)
            
            # Detailed statistics for each stock
            for ticker in self.results:
                stats = self.results[ticker]['stats']
                simulation = self.results[ticker]['simulation']
                
                # Price projections
                price_data = {
                    'Metric': ['Current Price', 'Mean Final Price', 'Median Final Price', 
                              '5th Percentile', '95th Percentile', 'Standard Deviation'],
                    'Value': [stats['current_price'], stats['mean_final_price'], 
                             stats['median_final_price'], stats['price_5th_percentile'],
                             stats['price_95th_percentile'], stats['price_std']],
                    'Formatted': [f"${x:.2f}" for x in [stats['current_price'], stats['mean_final_price'], 
                                 stats['median_final_price'], stats['price_5th_percentile'],
                                 stats['price_95th_percentile'], stats['price_std']]]
                }
                
                # Returns analysis
                return_data = {
                    'Metric': ['Mean Total Return', 'Median Total Return', '5th Percentile', 
                              '95th Percentile', 'Standard Deviation', 'Mean Annualized Return'],
                    'Value (%)': [stats['mean_total_return'], stats['median_total_return'],
                                 stats['return_5th_percentile'], stats['return_95th_percentile'],
                                 stats['return_std'], stats['mean_annualized_return']]
                }
                
                # Investment outcomes
                investment_data = {
                    'Metric': ['Investment Amount', 'Shares Purchased', 'Mean Final Value',
                              'Median Final Value', 'Mean Profit/Loss', 'Probability of Profit',
                              'VaR (5%)', 'CVaR (5%)', 'Max Drawdown', 'Upside Potential'],
                    'Value': [stats['investment_amount'], stats['shares_purchased'], 
                             stats['mean_final_value'], stats['median_final_value'],
                             stats['mean_profit_loss'], stats['probability_profit'],
                             stats['var_5'], stats['cvar_5'], stats['max_drawdown'],
                             stats['upside_potential']]
                }
                
                # Model parameters
                model_data = {
                    'Parameter': ['Base Drift (μ)', 'Adjusted Drift (μ)', 'Base Volatility (σ)',
                                 'Adjusted Volatility (σ)', 'Momentum Adjustment', 'Macro Adjustment',
                                 'Jump Intensity (λ)', 'Jump Mean', 'Jump Volatility'],
                    'Value': [stats['base_mu'], stats['adjusted_mu'], stats['base_sigma'],
                             stats['adjusted_sigma'], stats['momentum_adjustment'], 
                             stats['macro_adjustment'], simulation['jump_params']['lambda'],
                             simulation['jump_params']['mu_jump'], simulation['jump_params']['sigma_jump']]
                }
                
                # Momentum indicators
                momentum_data = {
                    'Indicator': ['RSI', 'MACD', 'Bollinger Band Position', 'MA Momentum',
                                 'Price vs MA50', 'Price vs MA200'],
                    'Value': [simulation['momentum']['rsi'], simulation['momentum']['macd'],
                             simulation['momentum']['bb_position'], simulation['momentum']['ma_momentum'],
                             simulation['momentum']['price_vs_ma50'], simulation['momentum']['price_vs_ma200']]
                }
                
                # Write to Excel
                pd.DataFrame(price_data).to_excel(writer, sheet_name=f'{ticker}_Price', index=False)
                pd.DataFrame(return_data).to_excel(writer, sheet_name=f'{ticker}_Returns', index=False)
                pd.DataFrame(investment_data).to_excel(writer, sheet_name=f'{ticker}_Investment', index=False)
                pd.DataFrame(model_data).to_excel(writer, sheet_name=f'{ticker}_Model', index=False)
                pd.DataFrame(momentum_data).to_excel(writer, sheet_name=f'{ticker}_Momentum', index=False)
                
                # Add charts
                worksheet = writer.sheets[f'{ticker}_Price']
                worksheet.insert_image('F2', self.results[ticker]['plot'])
        
        print(f" Report generated: {output_file}")
        
        # Print summary to console
        print("\n" + "="*60)
        print("ANALYSIS SUMMARY")
        print("="*60)
        
        for ticker in self.results:
            stats = self.results[ticker]['stats']
            print(f"\n{ticker}:")
            print(f"  Current Price: ${stats['current_price']:.2f}")
            print(f"  Mean Projected Return: {stats['mean_annualized_return']:.1f}% annually")
            print(f"  Probability of Profit: {stats['probability_profit']:.1f}%")
            print(f"  Expected P&L: ${stats['mean_profit_loss']:,.0f}")
            print(f"  Risk (VaR 5%): ${stats['var_5']:,.0f}")
            print(f"  Upside Potential: ${stats['upside_potential']:,.0f}")
            
        print("\n" + "="*60)
        
        # Cleanup plot files
        for ticker in self.results:
            plot_file = self.results[ticker]['plot']
            if os.path.exists(plot_file):
                os.remove(plot_file)
                
        return output_file

# Usage Example
if __name__ == "__main__":
    # Define stocks to analyze
    tickers = ['TSM', 'PLTR', 'GOOG', 'BNS', 'VFV.TO', 'BTCC.TO', 'SPMO', 'CORT']
    
    # Create analyzer
    analyzer = AdvancedStockProjection(
        tickers=tickers,
        investment_per_stock=10000,
        projection_years=2
    )
    
    # Run analysis
    analyzer.run_analysis()
    
    print("\n Analysis Complete!")
    print("Check the generated Excel file for detailed results and visualizations.")
